extends c
priority -49

global !p
import time, re
from my_ultisnip import get_guard_name, get_git_rel_path, get_project_vars

class Arg(object):
	def __init__(self, arg):
		self.arg = arg
		splitted = self.split_name(arg)
		self.name = splitted[1]
		self.ctype = splitted[0]

	def make_type(self):
		return self.re_space.sub(" ",
			self.re_asteriks.sub("",
				self.re_const.sub("", self.ctype))).strip()

	def split_name(self, arg):
		values = self.re_arg.match(arg)
		# if not values: return "", ""
		return list(map(lambda s: s.strip(), values.groups()[:2]))

	re_const = re.compile("\\bconst\\b")
	re_asteriks = re.compile("[*&]+$")
	re_space = re.compile(" +$")
	re_arg = re.compile("([^=]*)(\\b[a-zA-Z_0-9]+)(=(.*))?")


def get_args(arglist):
	args, arg = [], ""
	in_templ, in_call, in_struct = 0, 0, 0
	for ch in arglist:
		if ch == ",":
			if not in_templ and not in_call and not in_struct:
				if arg.strip():
					args.append(Arg(arg))
					arg = ""
					continue
		elif ch == "(":
			in_call += 1
		elif ch == ")":
			in_call -= 1
		elif ch == "<":
			in_templ += 1
		elif ch == ">":
			in_templ -= 1
		elif ch == "{":
			in_struct += 1
		elif ch == "}":
			in_struct -= 1
		arg += ch
	if arg and arg.strip():
		args.append(Arg(arg))
	return [arg for arg in args if arg.name]


def write_ctor_params(args, snip):
	if args:
		snip.shift()
		snip.shift()
		snip += ": " + ", ".join(("%s(%s)" % (arg.name, arg.name)) for arg in args)
		snip.unshift()
		snip += "{}"
		snip.unshift()
	else:
		snip.rv += "{}"


def write_class_members(args, snip):
	lines, max_col = [], 0
	for arg in args:
		lines.append("%s %s;" % (arg.make_type(), arg.name))
		max_col = max(len(lines[-1]), max_col)

	snip.shift()
	for line in lines:
		space_count = 1 + max_col - len(line)
		snip += line + (" " * space_count) + "//!< "
	snip.unshift()

endglobal

snippet _td
// TODO(burlog): 
endsnippet

snippet _ni
#warning not implemented yet!
endsnippet

snippet _hi
      `!v strftime("%Y-%m-%d")` (`whoami`)
*                  ${1:First draft.}
endsnippet

snippet cvs "const std::vector<std::string> &" w
const std::vector<std::string> &
endsnippet

snippet vs "std::vector<std::string>" w
std::vector<std::string>
endsnippet

snippet ee "const std::exception &" w
const std::exception &
endsnippet

snippet cs "const std::string &" w
const std::string &
endsnippet

snippet ss "std::string" w
std::string
endsnippet

snippet ssi "std::string::const_iterator" w
std::string::const_iterator
endsnippet

snippet sz "std::size_t" w
std::size_t
endsnippet

snippet cp "const char *" w
const char *
endsnippet

snippet cc
const ${1:} &${2:`!p snip.rv = re.sub("_t$", "", t[1].lower())`}
endsnippet

snippet qq
std::unique_ptr<${1:}>
endsnippet

snippet sq
std::unique_ptr<${1:}>
endsnippet

snippet iios
#include <iostream>
endsnippet

snippet ginc
#include <${1:string}>
endsnippet

snippet inc
#include "${1:error}.h"
endsnippet

snippet binc
#include <boost/${1}.hpp>
endsnippet

snippet bsinc
#include <boost/algorithm/string/${1}.hpp>
endsnippet

snippet Inc
#include "${1:`!p
snip.rv = vim.current.buffer.name
`}"
endsnippet

snippet nocopy "no copy defs"
${1:Object_t}(const $1 &) = delete;
$1 &operator=(const $1 &) = delete;
endsnippet

snippet nomove "no move defs"
${1:Object_t}($1 &&) = delete;
$1 &operator=($1 &&) = delete;
endsnippet


snippet cl "class"
/**
 */
class ${1:`!p snip.rv = (snip.basename or "name" + "_t")`} {
public:
	/** C'tor
	 */
	${1/(\w+).*/$1/}(${2}) `!p write_ctor_params(get_args(t[2]), snip)`
	${VISUAL}${0}
	`!p write_class_members(get_args(t[2]), snip)`
};
endsnippet

snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`} {
${VISUAL}${0}
} // namespace${1/.+/ /m}$1
endsnippet

snippet fw "std::forward<>" w
std::forward<${1:args_t}>
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:type_t}>
endsnippet

snippet tn "typename (typename)" w
typename ${1:type_t}
endsnippet

snippet array
std::array<${1:T}, ${2:N}> ${3};
endsnippet

snippet vector
std::vector<${1:T}> ${2};
endsnippet

snippet deque
std::deque<${1:T}> ${2};
endsnippet

snippet flist
std::forward_list<${1:T}> ${2};
endsnippet

snippet list
std::list<${1:T}> ${2};
endsnippet

snippet set
std::set<${1:T}> ${2};
endsnippet

snippet map
std::map<${1:Key}, ${2:T}> ${3};
endsnippet

snippet mset
std::multiset<${1:T}> ${2};
endsnippet

snippet mmap
std::multimap<${1:Key}, ${2:T}> ${3};
endsnippet

snippet uset
std::unordered_set<${1:T}> ${2};
endsnippet

snippet umap
std::unordered_map<${1:Key}, ${2:T}> ${3};
endsnippet

snippet umset
std::unordered_multiset<${1:T}> ${2};
endsnippet

snippet ummap
std::unordered_multimap<${1:Key}, ${2:T}> ${3};
endsnippet

snippet stack
std::stack<${1:T}> ${2};
endsnippet

snippet queue
std::queue<${1:T}> ${2};
endsnippet

snippet pqueue
std::priority_queue<${1:T}> ${2};
endsnippet

snippet cout
std::cout << ${1} << std::endl;
endsnippet

snippet cerr
std::cerr << ${1} << std::endl;
endsnippet

snippet cin
std::cin >> ${1};
endsnippet

snippet DD
std::cout << __PRETTY_FUNCTION__ << ":" << __LINE__ << std::endl;
endsnippet

snippet dd
DBG(DBG1, "AAAAAAAAAA %s:%d", __PRETTY_FUNCTION__, __LINE__);
endsnippet

snippet sca
static_cast<${1:unsigned}>(${2:expr})${3}
endsnippet

snippet dca
dynamic_cast<${1:unsigned}>(${2:expr})${3}
endsnippet

snippet rca "aaa" w
reinterpret_cast<${1:unsigned}>(${2:expr})${3}
endsnippet

snippet be "$1.begin(), $1.end()" w
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

snippet for "for (auto: container)"
for (${1:auto} ${2:i}: ${3:container}) {
	${4}
}
endsnippet

snippet ifor "for (ie != ee)"
for (auto i${1:entry} = ${2:container}.begin(), e$1 = $2.end(); i$1 != e$1; ++i$1) {
	${3:std::cout << *i$1 << std::endl;}
}
endsnippet

snippet cfor "for (c ie != c ee)"
for (auto i${1:entry} = ${2:container}.cbegin(), e$1 = $2.cend(); i$1 != e$1; ++i$1) {
	${3:std::cout << *i$1 << std::endl;}
}
endsnippet

snippet ld "lambda"
[${1}](${2}){${3}};
endsnippet

snippet HH "make header for h file" b
/*`!p ns, project_name = get_project_vars(path)`
 * FILE             $Id: $
 *
 * DESCRIPTION      ${1:desc}
 *
 * PROJECT          ${2:`!p snip.rv = project_name or "project"`}
 *
 * AUTHOR           `!v g:snips_author`
 *
 * Copyright (C) Seznam.cz a.s. `!p snip.rv = time.strftime("%Y")`
 * All Rights Reserved
 *
 * HISTORY
 *       `!p snip.rv = time.strftime("%Y-%m-%d")` (burlog)
 *                  First draft.
 */

#ifndef ${3:`!p snip.rv = get_guard_name(path)`}
#define $3

namespace${4:`!p snip.rv = " " + ns if ns else ""`} {

${VISUAL}${0}

} // namespace$4

#endif /* $3 */
endsnippet

snippet HC "make header for cc file" b
/*`!p ns, project_name = get_project_vars(path)`
 * FILE             $Id: $
 *
 * DESCRIPTION      ${1:desc}
 *
 * PROJECT          ${2:`!p snip.rv = project_name or "project"`}
 *
 * AUTHOR           `!v g:snips_author`
 *
 * Copyright (C) Seznam.cz a.s. `!p snip.rv = time.strftime("%Y")`
 * All Rights Reserved
 *
 * HISTORY
 *       `!p snip.rv = time.strftime("%Y-%m-%d")` (burlog)
 *                  First draft.
 */

#include "${3:`!p snip.rv = get_git_rel_path(path).replace(".cc", ".h").lstrip("include/").lstrip("src/")`}"

namespace${4:`!p snip.rv = " " + ns if ns else ""`} {

${VISUAL}${0}

} // namespace$4
endsnippet

