priority -50

global !p
import time
from my_ultisnip import get_guard_name
endglobal

snippet inc
#include <${1:stdio}.h>
endsnippet

snippet Inc
#include "${1:file.h}"
endsnippet

snippet #d "#define ..."
#define ${1}
endsnippet

snippet #if "#if #endif" b
#if ${1:0}
${VISUAL}${0}
#endif /* $1 */
endsnippet

snippet #ifndef "#ifndef ... #define ... #endif"
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
#define ${1:SYMBOL} ${2}
${VISUAL}${0}
#endif /* $1 */
endsnippet

snippet #ifdef "#ifdef ... #endif"
#ifdef ${1/([A-Za-z0-9_]+).*/$1/}
${VISUAL}${0}
#endif /* $1 */
endsnippet

snippet once "Include header once only guard"
#ifndef ${1:`!p snip.rv = get_guard_name(path)`}
#define $1

${VISUAL}${0}

#endif /* $1 */
endsnippet

snippet main "main() (main)"
int main(int argc, char *argv[]) {
    ${VISUAL}${0}
    return EXIT_SUCCESS;
}
endsnippet

snippet fori "for int i =  loop (fori)"
for (${4:int} ${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
    ${VISUAL}${0}
}
endsnippet

snippet printf "printf .. (printf)"
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet fprintf "fprintf ..."
fprintf(${1:stderr}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet st "struct"
struct ${1:`!p snip.rv = (snip.basename or "name")`}_t {
    ${VISUAL}${0}
};
endsnippet

snippet fun "function" b
${1:void} ${2:function_name}(${3}) {
    ${VISUAL}${0}
}
endsnippet

snippet fund "function declaration" b
${1:void} ${2:function_name}(${3});
endsnippet

snippet if
if (${1:true}) {
    ${0}
}
endsnippet

snippet ife
if (${1:true}) {
    ${2}
} else {
    ${0}
}
endsnippet

snippet el
else {
    ${0}
}
endsnippet

snippet elif
else if (${1:true}) {
    ${0}
}
endsnippet

snippet ifi
if (${1:true}) ${0};
endsnippet

snippet t
${1:/* condition */}? ${2:a}: ${3:b}
endsnippet

snippet sw
switch (${1:/* variable */}) {
case ${2:/* variable case */}:
    ${3}
    ${4:break;}${5}
default:
    ${6}
}
endsnippet

snippet wh
while (${1:/* condition */}) {
    ${2}
}
endsnippet

snippet ddo
do {
    ${2}
} while (${1:/* condition */});
endsnippet

snippet td
typedef ${1:int} ${2:MyCustomType};
endsnippet

snippet enum
enum ${1:name} { ${0} };
endsnippet

